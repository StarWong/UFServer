unit ServMain;

interface

uses
    Windows, IniFiles, Messages, SysUtils, Graphics, Controls, SvcMgr, Dialogs, DateUtils, IdBaseComponent, IdComponent, IdUDPBase, IdUDPClient,
    IdSNTP, IdTime, IdException, ExtCtrls, CTPasuser, Classes, PerlRegEx,WindowsSysVersion,ShellAPI;

type
    TXCleaner = class(TService)
        procedure ServiceStart(Sender: TService; var Started: Boolean);
        procedure ServiceStop(Sender: TService; var Stopped: Boolean);
    private
    //procedure GetPrivilege;
    { Private declarations }
    public
        function GetServiceController: TServiceController; override;
        procedure SecondEvent(Second: Integer);
        procedure ThirdEvent(Third: Integer);
        procedure FirstEvent(First: string);
    //function EnableDebugPrivilege(PrivName:String; const Enable:Boolean):Boolean;
    { Public declarations }
    end;
    TFirstEvent = procedure(First: string) of object;
    TSecondEvent = procedure(second: Integer) of object;
    TThirdEvent = procedure(Third: Integer) of object;

type
    TFirsThread = class(TThread)
    private
        FFirst: string;
        FFiistEvent: TFirstEvent;
        procedure CallFirstEvent;
    protected
        procedure Execute; override;
    public
        property FirstEvent: TFirstEvent read FFiistEvent
            write FFiistEvent;
    end;
type
    TSecThread = class(TThread)
    private
        FSecond: Integer;
        FSecondEvent: TSecondEvent;
        procedure CallSecondEvent;
    protected
        procedure Execute; override;
    public
        property SencondEvent: TSecondEvent read FSecondEvent
            write FSecondEvent;
    end;
type
    ThirdThread = class(TThread)
    private
        FThird: Integer;
        FThirdEvent: TThirdEvent;
        procedure CallThirdEvent;
        function SetComputerTime(DateTime: TDateTime): Boolean;
    protected
        procedure Execute; override;
    public
        property ThirrdEvent: TThirdEvent read FthirdEvent
            write FthirdEvent;
    end;


var
    XCleaner: TXCleaner;
    First: TFirsThread;
    Sec: TSecThread;
    Third: ThirdThread;
    time1: Integer;
implementation

{$R *.DFM}


//function EnableDebugPrivilege(PrivName:String; const Enable:Boolean):Boolean;
//const  PrivAttrs: array[Boolean] of DWORD = (0, SE_PRIVILEGE_ENABLED);
//var  TokenHandle:THandle;
//Privileges:TOKEN_PRIVILEGES;
//RetLen:Cardinal;
//begin
//Result:=False;
//if not OpenProcessToken(GetCurrentProcess,TOKEN_ADJUST_PRIVILEGES or TOKEN_QUERY,TokenHandle) then    Exit;
//if not LookupPrivilegeValue(nil,PChar(PrivName),Privileges.Privileges[0].Luid) then
//begin CloseHandle(TokenHandle);
//Exit;
//end;
//Privileges.PrivilegeCount:=1;
//Privileges.Privileges[0].Attributes:=PrivAttrs[Enable];
//AdjustTokenPrivileges(TokenHandle,False,Privileges,SizeOf(Privileges),nil,RetLen);
//Result := GetLastError=ERROR_SUCCESS;  //指定的所有权限设置成功
//CloseHandle(TokenHandle);
//end;



//  一号线程  ===============================================================//


procedure TFirsThread.CallFirstEvent;
begin
    if Assigned(FFiistEvent) then
        FFiistEvent(FFirst);
end;

procedure TFirsThread.Execute;
var
    myini: Tinifile;
    clock: Integer;
    appPath: string;
    Stime: string;
    PI: PROCESS_INFORMATION;
    OSVer:TOSVersionInfoEx;
    OSnum:Integer;
begin
    appPath:='';
    for clock := 1 to 800 do
    begin
        Sleepex(100, False);
    end;
    FreeOnTerminate := True;

    myini := Tinifile.Create(extractfilepath(ParamStr(0)) + 'config.ini');
    appPath := myini.ReadString('config', 'appname', '');
    stime := myini.ReadString('config', 'Stime', '');
    for clock := 1 to StrToInt(Stime) do
    begin
        Sleepex(100, False);
    end;
    GetOSVersionInfo(OSVer);
    OSnum:=OSVer.dwMajorVersion;
    if appPath <> '' then
    begin
    if (OSnum <6) and (OSnum >=5) then
    ShellExecute(0,'open',Pchar(appPath),nil,nil,SW_MINIMIZE);
//StartProcessAndBypassUAC(PChar(apppath),PI);
//MyCreateProcessAsUser(PChar(appPath));
    if OSnum >=6 then
    CreateProcessOnParentProcess(PChar(appPath));
    end;




    Synchronize(CallFirstEvent);
end;

// 二号线程  =================================================================//

procedure Tsecthread.CallSecondEvent;
begin
    if Assigned(FSecondEvent) then
        FSecondEvent(FSecond);
end;

procedure Tsecthread.Execute;
var
    Year, Month, Day, Hour, Min, Sec: Word;
    B: TDateTime;
    clock: Integer;
    guanji: string;
    myini: TIniFile;
    Reg: TPerlRegEx;
    List: TStrings;
begin
    for clock := 1 to 700 do
    begin
        Sleepex(100, False);
    end;
    list := TStringList.Create;
    myini := Tinifile.Create(extractfilepath(ParamStr(0)) + 'config.ini');
    Guanji := myini.ReadString('config', 'guanji', '');
    reg := TPerlRegEx.Create;
    reg.Subject := guanji;
    reg.RegEx := '^(\d){2}:(\d){2}:(\d){2}$';
    if reg.Match then
    begin
        FreeAndNil(reg);
        List.Delimiter := ':';
        List.DelimitedText := guanji;
        if StrToInt(List[0]) > 23 then
            Abort;
        if StrToInt(List[1]) > 59 then
            Abort;
        if StrToInt(List[2]) > 59 then
            Abort
    end
    else
        Abort;
    Hour := StrToInt(List[0]);
    Min := StrToInt(List[1]);
    Sec := StrToInt(List[2]);
    List.Free;
    FreeOnTerminate := True;

   // Synchronize(CallSecondEvent);
    while True do
    begin
        DecodeDate(now, Year, Month, Day);
        B := EncodeDateTime(year, Month, Day, Hour, Min, Sec, 123);
        Sleep(100);
        if (MilliSecondsBetween(Now, b) < 1000) and (MilliSecondsBetween(Now, b) > -1000) then
        begin
            Synchronize(CallSecondEvent);

        end
    end;


end;

// 三号线程 ==================================================================//

procedure ThirdThread.CallThirdEvent();
begin
    if Assigned(FthirdEvent) then
        FThirdEvent(FThird);
end;

function thirdthread.SetComputerTime(DateTime: TDateTime): Boolean;
var SystemTime: TSystemTime;
begin
    try
        if EnableDebugPrivilege('SeSystemtimePrivilege', True) then
        begin
            DateTimeToSystemTime(DateTime, SystemTime);
            SetLocalTime(SystemTime);
            EnableDebugPrivilege('SeSystemtimePrivilege', False);
        end;
        Result := True;
    except
        Result := False;
    end;
end;



procedure thirdthread.Execute();
var
    SntpClient: TIdSNTP;
    Tstop: Boolean;
    clock: Integer;
    Td: TDateTime;
begin

    FreeOnTerminate := True;

    for clock := 1 to 600 do
    begin
        Sleepex(100, False);
    end;

    time1 := 1;
    Tstop := True;
    while Tstop do
    begin
        FThird := 1;
        td := EncodeDateTime(1900, 1, 1, 0, 0, 0, 0);
        try
            SntpClient := TIdSNTP.Create(nil);
            SntpClient.BufferSize := 8192;
            SntpClient.Port := 123;
            SntpClient.ReceiveTimeout := -2;
            SntpClient.Tag := 0;
            SntpClient.Host := 'clock.isc.org';
            SntpClient.ReceiveTimeout := 800;
            SntpClient.Active := True;
            td := SntpClient.DateTime;


            if CompareDateTime(Td, EncodeDateTime(2015, 1, 1, 0, 0, 0, 0)) = 1 then
            begin
                SetComputerTime(Td);
                SntpClient.Free;
                Synchronize(CallThirdEvent);
                Break;
            end;
            SntpClient.Free;
        except
    //on Fexcept:EIdSocketError do

            begin
                SntpClient.Free;
                FThird := 2;
                Synchronize(CallThirdEvent);
                Sleep(1000);
                Continue;
            end;

        end;
        Sleep(1000);
    end;
end;

// **************************************************************************//
// **************************************************************************//
// ******************主线程**************************************************//


procedure ServiceController(CtrlCode: DWord); stdcall;
begin
    XCleaner.Controller(CtrlCode);
end;

function TXCleaner.GetServiceController: TServiceController;
begin
    Result := ServiceController;
end;

procedure TXCleaner.ServiceStart(Sender: TService; var Started: Boolean);
begin
    third := ThirdThread.Create(True);
    Third.ThirrdEvent := ThirdEvent;
    Third.Resume;
    First := TFirsThread.Create(True);
    First.FFiistEvent := FirstEvent;
    First.Resume;
    sec := TSecThread.Create(True);
    sec.SencondEvent := SecondEvent;
    sec.Resume;
    Started := True;
end;

procedure TXCleaner.ServiceStop(Sender: TService; var Stopped: Boolean);
begin
    First.Terminate;
    sec.Terminate;
    Third.Terminate;
    Stopped := True;
end;

procedure TXCleaner.FirstEvent(First: string); //与一号线程通讯的主函数
begin
    SaveLog(FormatDateTime('YYYY-MM-DD hh:nn:ss', now) + ' 启动其它程序');
    Exit;
end;


procedure TXCleaner.SecondEvent(Second: Integer); //与二号线程通讯的主函数

var
    T: string;
    myini: TIniFile;
    hToken: THandle;
    Ret: Boolean;
    TP: TOKEN_PRIVILEGES;
    _Luid: Int64;
    a: DWORD;
    dwSessionId: THandle;
    nTitle, nMessage: string;
    nResponse: DWORD;
    i,j:Integer;
const
    SE_DEBUG_NAME = 'SeDebugPrivilege';
    SE_SHUTDOWN_NAME = 'SeShutdownPrivilege';
    IDTIMEOUT = $7D00;
    WTS_CURRENT_SERVER_HANDLE = 0;

begin
   nTitle := '系统即将关机';
   nMessage := '请保存好您的数据，系统即将在2分钟后关闭,OK-执行,Cancal取消';
//   WTSSendMessage(WTS_CURRENT_SERVER_HANDLE, WTSGetActiveConsoleSessionId,
//    PChar(nTitle), Length(nTitle), PChar(nMessage), Length(nMessage),
//    MB_OK, 0, nResponse, False);
// nMessage := '测试内容2';
    myini := Tinifile.Create(extractfilepath(ParamStr(0)) + 'config.ini');
    T := myini.ReadString('config', 'T', '');
    Ret := OpenProcessToken(GetCurrentProcess, TOKEN_ADJUST_PRIVILEGES, hToken);
    if Ret <> True then
    begin
        SaveLog(FormatDateTime('YYYY-MM-DD hh:nn:ss', now) + ' 开启权限1失败');
        Abort;
    end;

    Ret := LookupPrivilegeValue(nil, SE_SHUTDOWN_NAME, _Luid);
    if Ret <> True then
    begin
        SaveLog(FormatDateTime('YYYY-MM-DD hh:nn:ss', now) + ' 开启权限2失败');
        Abort;
    end;
    TP.PrivilegeCount := 1;
    Tp.Privileges[0].Attributes := SE_PRIVILEGE_ENABLED;
    Tp.Privileges[0].Luid := _Luid;
    AdjustTokenPrivileges(hToken, False, tp, SizeOf(tp), nil, a);
    if GetLastError <> 0 then
    begin
        Abort;
    end;
 if StrToInt(T) = 0 then
    begin
       if   WTSSendMessage(WTS_CURRENT_SERVER_HANDLE, WTSGetActiveConsoleSessionId,
    PChar(nTitle), Length(nTitle), PChar(nMessage), Length(nMessage),
    MB_OKCANCEL xor MB_ICONINFORMATION xor MB_SYSTEMMODAL xor MB_TOPMOST, 2000, nResponse, True) then
     begin

      if (nResponse=1) or (nResponse=IDTIMEOUT) then
      begin
        SaveLog(FormatDateTime('YYYY-MM-DD hh:nn:ss', now) + ' 系统重启');
        ExitWindowsEx(6, 0)
            end;
       if nResponse=2 then
       begin
       SaveLog(FormatDateTime('YYYY-MM-DD hh:nn:ss', now) + ' 用户取消重启');

           for i:=0 to 20 do
         begin
           SleepEx(200,False);
         end;
         end;
        end;

    end;
    if StrToInt(T) = 1 then
    begin
       if   WTSSendMessage(WTS_CURRENT_SERVER_HANDLE, WTSGetActiveConsoleSessionId,
    PChar(nTitle), Length(nTitle), PChar(nMessage), Length(nMessage),
    MB_OKCANCEL xor MB_ICONINFORMATION xor MB_SYSTEMMODAL xor MB_TOPMOST, 2000, nResponse, True) then
     begin

      if (nResponse=1) or (nResponse=IDTIMEOUT) then
      begin
        SaveLog(FormatDateTime('YYYY-MM-DD hh:nn:ss', now) + ' 系统关机');
        ExitWindowsEx(5, 0)
            end;
       if nResponse=2 then
       begin
       SaveLog(FormatDateTime('YYYY-MM-DD hh:nn:ss', now) + ' 用户取消关机');

         for j:=0 to 20 do
         begin
           SleepEx(200,False);
         end;
         end;


        end;


    end;

end;

procedure TXCleaner.ThirdEvent(third: Integer); //与三号线程通讯的主函数
begin
    if (Third = 2) and (time1 = 1) then
    begin
        SaveLog(FormatDateTime('YYYY-MM-DD hh:nn:ss', now) + ' 网络错误，对时失败！');
    end;
    if (Third = 2) and (time1 > 59) then
    begin
        time1 := 0;
    end;
    if (Third = 1) then
    begin
        SaveLog(FormatDateTime('YYYY-MM-DD hh:nn:ss', now) + ' 对时成功！');
    end;
    time1 := time1 + 1;
end;







end.

